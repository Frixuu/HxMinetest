// SPDX-License-Identifier: Zlib
package minetest;

import partials.Partial;

@:noCompletion
extern class Minetest_Auth implements Partial {

    /**
        Converts a string representation of privs into a table form.
    **/
    @:native("string_to_privs")
    public static function stringToPrivs(
        str: String,
        delimiter: String = ","
    ): NativeSet<String>;

    /**
        Returns the string representation of `privs`.
    **/
    @:native("privs_to_string")
    public static function privsToString(
        privs: Table<String, Bool>,
        delimiter: String = ","
    ): String;

    @:native("get_player_privs")
    public static function getPlayerPrivs(name: String): NativeSet<String>;

    /**
        Tests whether a player has certain privileges (ie. can perform some operation).
        @param player Either a player object or a player username.
        @param privs List (or a table) of the privileges to check.
    **/
    @:native("check_player_privs")
    public static function checkPlayerPrivs(
        player: PlayerLike,
        privs: EitherType<Rest<String>, Table<String, Bool>>
    ): CheckPlayerPrivsResult;

    /**
        Returns true if the "password entry" for a player with name
        matches given password, false otherwise.

        The "password entry" is the password representation generated by the engine
        as returned as part of a `getAuth()` call on the auth handler.

        Only use this function for making it possible to log in via password
        from external protocols such as IRC, other uses are frowned upon.
    **/
    @:native("check_password_entry")
    public static function checkPasswordEntry(name: String, entry: String, password: String): Bool;

    @:native("get_password_hash")
    public static function getPasswordHash(name: String, rawPassword: String): Any;

    /**
        Returns an IP address of the player.

        Note: The player needs to be online for this to be successful.
    **/
    @:native("get_player_ip")
    public static function getPlayerIp(name: String): Null<String>;

    /**
        Returns the currently active auth handler.
    **/
    @:native("get_auth_handler")
    public static function getAuthHandler(): AuthHandler;

    @:native("notify_authentication_modified")
    public static function notifyAuthModified(?name: String): Void;

    @:native("set_player_password")
    public static function setPlayerPassword(name: String, hash: Any): Void;

    @:native("set_player_privs")
    public static function setPlayerPrivs(name: String, privs: Table<String, Bool>): Void;

    @:native("auth_reload")
    public static function authReload(): Void;
}
